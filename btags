#!/usr/bin/env bash

#Start btags dynamic functions
function btags_check_commands() {
  FAILED=0

  if [ "$(which "ctags")" = "" ]; then
    echo "Cannot find 'ctags'. Either the command is not in your PATH, or the command isn't installed. To install 'ctags': sudo apt-get install ctags or similar; see also http://ctags.sourceforge.net."
    FAILED=1
  fi

  if [ "$(which "rtags")" = "" ]; then
    echo "Cannot find 'rtags'. Either the command is not in your PATH, or the command isn't installed. To install 'rtags': gem install bloopletech-rtags; see also https://github.com/bloopletech/rtags."
    FAILED=1
  fi

  if [ "$FAILED" = "1" ]; then
    exit 1
  fi
}

function btags_generate() {
  cd "$SRCDIR"

  grep -r -l -I "^" | grep -v -E '(^\.|/\.)' > "$TAGSDIR/files"

  grep -E --color=never '^(.*\.build\.xml|.*\.asm|.*\.ASM|.*\.s|.*\.S|.*\.A51|.*\.29k|.*\.29K|.*\.66k|.*\.66K|.*\.66s|.*\.66S|.*\.66x|.*\.66X|.*\.68k|.*\.68K|.*\.68s|.*\.68S|.*\.68x|.*\.68X|.*\.86k|.*\.86K|.*\.86s|.*\.86S|.*\.86x|.*\.86X|.*\.88k|.*\.88K|.*\.88s|.*\.88S|.*\.88x|.*\.88X|.*\.x66|.*\.x68|.*\.x86|.*\.x88|.*\.X66|.*\.X68|.*\.X86|.*\.X88|.*\.asp|.*\.asa|.*\.awk|.*\.gawk|.*\.mawk|.*\.bas|.*\.bi|.*\.bb|.*\.pb|.*\.bet|.*\.c|.*\.cc|.*\.cp|.*\.cpp|.*\.cxx|.*\.h|.*\.hh|.*\.hp|.*\.hpp|.*\.hxx|.*\.C|.*\.H|.*\.cs|.*\.cbl|.*\.cob|.*\.CBL|.*\.COB|.*\.bat|.*\.cmd|.*\.e|.*\.erl|.*\.ERL|.*\.hrl|.*\.HRL|.*\.as|.*\.mxml|.*\.f|.*\.for|.*\.ftn|.*\.f77|.*\.f90|.*\.f95|.*\.F|.*\.FOR|.*\.FTN|.*\.F77|.*\.F90|.*\.F95|.*\.go|.*\.htm|.*\.html|.*\.java|.*\.js|.*\.cl|.*\.clisp|.*\.el|.*\.l|.*\.lisp|.*\.lsp|.*\.lua|.*\.mak|.*\.mk|Makefile|makefile|GNUmakefile|.*\.m|.*\.ml|.*\.mli|.*\.p|.*\.pas|.*\.pl|.*\.pm|.*\.plx|.*\.perl|.*\.php|.*\.php3|.*\.phtml|.*\.py|.*\.pyx|.*\.pxd|.*\.pxi|.*\.scons|.*\.rexx|.*\.rx|.*\.ruby|.*\.SCM|.*\.SM|.*\.sch|.*\.scheme|.*\.scm|.*\.sm|.*\.sh|.*\.SH|.*\.bsh|.*\.bash|.*\.ksh|.*\.zsh|.*\.sl|.*\.sml|.*\.sig|.*\.sql|.*\.tcl|.*\.tk|.*\.wish|.*\.itcl|.*\.tex|.*\.vr|.*\.vri|.*\.vrh|.*\.v|.*\.vhdl|.*\.vhd|.*\.vim|.*\.y)$' "$TAGSDIR/files" > "$TAGSDIR/ctags.files"
  while read file; do
    if [ "$file" -nt "$TAGSDIR/$file.tags" ]; then
      echo "$file"
    fi
  done < "$TAGSDIR/ctags.files" > "$TAGSDIR/ctags.changed.files"

  grep -E --color=never '^(.*\.rb|.*\.rake|.*\.ru|Gemfile|Guardfile|Procfile|Rakefile)$' "$TAGSDIR/files" > "$TAGSDIR/rtags.files"
  while read file; do
    if [ "$file" -nt "$TAGSDIR/$file.tags" ]; then
      echo "$file"
    fi
  done < "$TAGSDIR/rtags.files" > "$TAGSDIR/rtags.changed.files"

  if [ ! -s "$TAGSDIR/ctags.changed.files" -a ! -s "$TAGSDIR/rtags.changed.files" ]; then
    return 0
  fi

  ESCAPEDTAGSDIR="$(printf '%q' "$TAGSDIR")"

  parallel mkdir -p "$ESCAPEDTAGSDIR"/{//} "2>/dev/null" "&&" "ctags -xu" {} ">" "$ESCAPEDTAGSDIR"/{}.tags "2>/dev/null" "&&" echo -n "." < "$TAGSDIR/ctags.changed.files"

  parallel mkdir -p "$ESCAPEDTAGSDIR"/{//} "2>/dev/null" "&&" "rtags -x -B" {} ">" "$ESCAPEDTAGSDIR"/{}.tags "2>/dev/null" "&&" echo -n "." < "$TAGSDIR/rtags.changed.files"

  while read file; do
    cat "$TAGSDIR/$file.tags"
  done < <(cat "$TAGSDIR"/{ctags,rtags}.files) > "$TAGSDIR/tags.tags"

  sed -e 's/ /\x00/g' -e 's/^.*$/& path 1 & path/g' < "$TAGSDIR/files" >> "$TAGSDIR/tags.tags"

  rm "$TAGSDIR/files" "$TAGSDIR"/{ctags,rtags}.files "$TAGSDIR"/{ctags,rtags}.changed.files
}

#End btags dynamic functions

function btags_clean() {
  rm -r "$TAGSDIR"/*
}

function btags_git_branch() {
  if [ ! -e .git ]; then
    GITBRANCH=""
    return
  fi

  GITBRANCH="@$(git branch --no-color | sed -e "/^\s/d" -e "s/^\*\s//")"
}

case "$1" in
  path)
    ACTION="path"
    SRCPATH="$2"
    ;;
  clean) ACTION="clean";;
  debug) ACTION="debug";;
  stats)
    ACTION="stats"
    SRCPATH="$2"
    ;;
  *) ACTION="btags"
    SRCPATH="$1"
    ;;
esac

SRCDIR=$(realpath "$PWD")
btags_git_branch
TAGSDIR="$HOME/.btags$SRCDIR$GITBRANCH"
OVERALLTAGSFILEPATH="$TAGSDIR/tags.tags"

if [[ "$ACTION" == "btags" || "$ACTION" == "debug" || "$ACTION" == "path" || "$ACTION" == "stats" ]]; then
  if [[ "$SRCPATH" == "" ]]; then
    SRCPATH="$PWD"
  fi
  SRCPATH=$(realpath "$SRCPATH")

  SRCDIRLENGTH="${#SRCDIR}"
  if [[ "${SRCPATH:0:$SRCDIRLENGTH}" == "$SRCDIR" ]]; then
    SRCPATH="${SRCPATH:$SRCDIRLENGTH}"
  fi

  if [[ "$SRCPATH" == "" || -d "$SRCPATH" ]]; then
    TAGSFILEPATH="$TAGSDIR$SRCPATH/tags.tags"
  else
    TAGSFILEPATH="$TAGSDIR$SRCPATH.tags"
  fi
fi

mkdir -p "$TAGSDIR"

(
  flock -n 9 || { echo "An instance of btags is already updating this project."; exit 1; }

  if [[ "$ACTION" == "btags" ]]; then
    btags_check_commands
    btags_generate

    echo ""
    echo "$TAGSFILEPATH"
  elif [[ "$ACTION" == "debug" ]]; then
    echo "Starting in $PWD"
    echo "Srcdir is $SRCDIR"
    echo "Checking commands..."
    btags_check_commands
    echo "Generating updates..."
    btags_generate

    echo ""
    echo "Generating updates finished"
    echo "Tags file path:"
    echo "$TAGSFILEPATH"
  elif [[ "$ACTION" == "clean" ]]; then
    btags_clean
    echo ""
  elif [[ "$ACTION" == "path" ]]; then
    if ! [ -e "$TAGSFILEPATH" ]; then
      echo "Not a btags project"
    else
      echo -n "$TAGSFILEPATH"
    fi
  elif [[ "$ACTION" == "stats" ]]; then
    function human_readable_filesize() {
      LSOUTPUT=$(ls -1Ssh "$1")
      LSPARTS=($LSOUTPUT)
      echo ${LSPARTS[0]}
    }

    function human_readable_dirsize() {
      DUOUTPUT=$(du -csh "$1")
      DUPARTS=($DUOUTPUT)
      echo ${DUPARTS[0]}
    }

    function human_readable_word_count() {
      WCOUTPUT=$(wc -l "$1")
      WCPARTS=($WCOUTPUT)
      echo ${WCPARTS[0]}
    }

    function stats_for_file() {
      echo "File path: $1"
      FILESIZE=$(human_readable_filesize "$1")
      echo "File size: $FILESIZE"
      TAGSCOUNT=$(human_readable_word_count "$1")
      echo "Tags count: $TAGSCOUNT"
      echo
    }

    echo

    if [[ "$SRCPATH" != "" && ! -d "$SRCPATH" ]]; then
      echo "Specific tags file:"
      stats_for_file "$TAGSFILEPATH"
    fi

    echo "Overall tags file:"
    stats_for_file "$OVERALLTAGSFILEPATH"

    echo "This project:"
    TOTALSIZE=$(human_readable_dirsize "$TAGSDIR")
    echo "Total filesystem usage: $TOTALSIZE"
    TAGFILECOUNT=$(cd "$TAGSDIR"; find . -type f \( ! -path '*/.*' \) | wc -l)
    echo "Number of tag files: $TAGFILECOUNT"
    echo
  #  TOTALTAGSCOUNT=$(find "$TAGSDIR" -type f -print0 | xargs -0 cat | wc -l)
  #  echo "Total tags count: $TOTALTAGSCOUNT"

    TOTALSIZE=$(human_readable_dirsize "$HOME/.btags/")
    echo "Total filesystem usage for all btags projects: $TOTALSIZE"
    echo
  fi
) 9>"$TAGSDIR/.btags.lock"
